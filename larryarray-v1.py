
def rotate(sub_A,n_rot):
    # rotate n steps from left to right
    if n_rot==1:
        sub_A[0], sub_A[1], sub_A[2] = sub_A[1], sub_A[2], sub_A[0]
    if n_rot==2:
        sub_A[0], sub_A[1], sub_A[2] = sub_A[2], sub_A[0], sub_A[1]
    return sub_A

def larrysArray(A):
    n_A = len(A)
    n_sub_A = 3
    sorted_A = sorted(A)
    # print(A, '>>>', sorted_A, ', len = ',n_A, ', n_sub_A = ', n_sub_A)

    # Order all elements until (n_A - 3)
    for correct_pos in range(n_A - n_sub_A + 1):
        item = sorted_A[correct_pos]
        current_pos = A.index(item)

        while current_pos != correct_pos:
            #print(item, current_pos, end=' ')
            n_rot = min(current_pos - correct_pos, 2)
            min_ind = max(current_pos - n_sub_A + 1, correct_pos)
            max_ind = min(min_ind + n_sub_A, n_A)
            sub_A = A[min_ind:max_ind]
            #print(sub_A,end=' > ')
            sub_A = rotate(sub_A, n_rot)
            #print(sub_A,end=' >>> ')
            A[min_ind:max_ind] = sub_A
            #print(A)
            current_pos = A.index(item)

    # Check if sub_A[:-3] is ordered:
    sortable = 'YES'
    sub_A = A[-3:]
    for i in range(n_sub_A-1):
        if sub_A[i]>sub_A[i+1]:
            sortable = 'NO'

    return sortable


if __name__ == '__main__':
    inp
    A = list(map(int,inp.split()))
    print(larrysArray(A))